---
- name: Installing platform
  hosts: rockstat
  become: yes
  vars_files:
    - vars/config.yml
  tasks:
    - name: Fail wrong python
      assert:
        that: 
          - "ansible_python_interpreter == '/usr/bin/python3'"
        msg: "Required python 3. Details: https://docs.ansible.com/ansible/latest/reference_appendices/python_3_support.html"
      tags: ["always"]

      ##### ##### ##### ##### #####    Server configuration    ##### ##### ##### ##### ##### 
    - block:
      - name: Including Base Server role
        include_role:
          name: dr.server
        vars:
          drs_setup_user: yes
          drs_user: '{{support_user}}'
          drs_home_dir: "{{home_dir}}"
          drs_pub_key_file: '{{support_key_file}}'
          drs_disable_ipv6: "{{disable_ipv6}}"
      when: 'setup_server == True'
      tags: ['never', 'os', 'base']


    ##### ##### ##### ##### #####    Docker server     ##### ##### ##### ##### ##### 
    - block:
      - name: Including Docker role
        include_role:
          name: dr.docker
        vars:
          drd_users:
          - "{{support_user}}"
          drd_create_network: yes
          drd_version: edge
          drd_net_name: '{{docker_net_name}}'
          drd_bind_ip: "{{docker_host_ip}}"
          drd_interface: '{{docker_interface}}'
          drd_net: '{{docker_net}}'
          drd_mtu: '1400'
      tags: ['never', 'docker', 'base']


    ##### ##### ##### ##### #####    Exposeur (UFW, iptables)    ##### ##### ##### ##### ##### 
    - block:
      - name: Including Exposeur role
        include_role:
          name: dr.exposeur
        vars:
          expo_reset_ufw: true
          expo_rules: '{{firewall_rules|flatten + host_firewall_rules|default([]) + group_firewall_rules|default([])}}'
          expo_expose_rules: '{{expose_rules|default([]) + host_expose_rules|default([]) + group_expose_rules|default([])}}'
      tags: ['never', 'firewall', 'base']


    ##### ##### ##### ##### #####    OpenVPN server    ##### ##### ##### ##### ##### 
    - block:
      - debug:
          msg: "docker_net_name:{{docker_net_name}}, docker_ipnetwork:{{docker_ipnetwork}} docker_netmask:{{docker_netmask}} "
      - name: Creating vpn keys dir
        file:
          state: directory
          path: "{{dirs.ovpnkeys}}"
      - name: Including OpenVPN server role
        include_role:
          name: alco-openvpn-server
        vars:
          ovpn_domain: "{{domain}}"
          ovpn_keys_dir: '{{dirs.ovpnkeys}}'
          ovpn_docker_net_name: '{{docker_net_name}}'
          ovpn_docker_network: '{{docker_ipnetwork}}'
          ovpn_docker_netmask: '{{docker_netmask}}'
          ovpn_port: '{{ports.openvpn.0}}'
      tags: ['never', 'ovpn', 'base']


    ##### ##### ##### ##### #####    Lets encrypt    ##### ##### ##### ##### ##### 
    - block:
      - name: Including LetsEncrypt role
        include_role:
          name: dr.letsencrypt
        vars:
          letsencrypt_domains_groups: '{{domains_ssl}}'
          letsencrypt_pause_services: ['nginx']
      when: "_setup_ssl == True and not _setup_ssl_wildcard | bool == True"
      tags: ['never', 'ssl', 'http']


    ##### ##### ##### ##### #####    Lets encrypt WildCard    ##### ##### ##### ##### ##### 
    - block:
      - name: Including LetsEncrypt AcmeDNS role
        include_role:
          name: dr.letsencrypt.wildcard.auto
        vars:
          _r_acmesh_config_dir: "{{dirs.acmesh}}/config"
          _r_acmedns_config_dir: "{{dirs.acmedns}}/config"
          _r_acmedns_data_dir: "{{dirs.acmedns}}/data"
          _r_acmesh_host_cert_root: "{{_ssl_cert_dir}}"
          _r_acmedns_host: "{{_acmedns_endpoint}}"
          _r_acmedns_api: "http://{{_r_acmedns_host}}:19943"
          _r_acmedns_ns1_ip: "{{_challenge_ns1|default('0.0.0.0')}}"
          _r_acmedns_ns2_ip: "{{_challenge_ns2|default('0.0.0.0')}}"
          _r_acmedns_setup_dns: "{{_acmedns_setup}}"
          _r_domains: "{{_ssl_certs}}"
      when: "_setup_ssl_wildcard | bool == True"
      tags: ['never', 'ssl', 'wildcard', 'http']


    ##### ##### ##### ##### #####    Nginx    ##### ##### ##### ##### ##### 

    - block:
      - name: Including Nginx role
        include_role:
          name: jdauphant.nginx
        vars:
          nginx_official_repo: no
          keep_only_specified: yes
          nginx_http_params: '{{_nginx_http_params}}'
          nginx_sites: "{{_nginx_sites|combine(_nginx_sites_extra|default({}))}}"
          nginx_auth_basic_files:
            common: "{{ common_users|flatten }}"
          nginx_configs:
            upgrade: '{{_nginx_proto_upgrade}}'
            gzip: '{{_nginx_gzip_params}}'
            proxy: '{{_nginx_proxy_params + _nginx_proxy_params_extra|default([])}}'
            upstream: '{{_nginx_upstreams}}'
            ssl: '{{_nginx_ssl_params}}'
      vars:
        local_config: "{{ansible_local.config|default({})}}"
        local_general: "{{local_config.general|default({})}}"
        common_users:
          - "admin:{{local_general.admin_password}}"
          - "{{local_general.users}}"
      when: "setup_nginx == True"
      tags: ['never', 'nginx', 'system']

    ##### ##### ##### ##### #####    Netdata    ##### ##### ##### ##### ##### 
    - block:
      - name: Including Netdata role
        include_role:
          name: dr.netdata
        vars:
          drn_allow:
            dashboard_from: "*"
            badges_from: "*"
            conf_from: "*"
            connections_from: "*"
            streaming_from: "*"
          drn_stream: '{{netdata_stream_config|default({})}}'
          drn_backend: '{{netdata_backend_config|default({})}}'
          drn_bind_to: "{{if_inner}}"
      tags: ['never', 'netdata', 'system']


    ##### ##### ##### ##### #####    Clickhouse    ##### ##### ##### ##### ##### 
    - block: 
      - name: Including ClickHouse role
        include_role:
          name: AlexeySetevoi.clickhouse
        vars:
          nets: 
          ifaces: 
          clickhouse_users_custom: '{{ch_users|default([])}}'
          clickhouse_listen_host_default: ['127.0.0.1', "{{if_inner}}"] # '::1', 
          clickhouse_networks_default: ['127.0.0.1', "{{docker_net}}"] # '::1', 
          clickhouse_dbs_custom: [{name: '{{ch_db}}'}]
          clickhouse_path_data: "{{dirs.clickhouse}}"
          clickhouse_path_tmp: "{{dirs.clickhouse_tmp}}"
        retries: 3
        delay: 3
      tags: ['never', 'clickhouse', 'system']


    ##### ##### ##### ##### #####    Clickhouse Proxy    ##### ##### ##### ##### ##### 
    - block:
      - name: CHProxy setup
        debug: msg="role begin"
      - name: Including ClickHouse proxy role
        include_role: 
          name: chproxy
        vars:
          chproxy_docker_bind: "{{if_inner}}:{{ports.chproxy.0}}:{{ports.chproxy.1}}"
          chproxy_def_node: "{{if_inner}}:{{ports.clickhouse.0}}"
          chproxy_clusters: "{{hst_chproxy_clusters|default([])}}"
          chproxy_docker_net: "{{docker_net_name}}"
          chproxy_users: "{{_chproxy_users|default([])}}"
          chproxy_allowed_networks: "{{chproxy_allow_from|default([])}}"
          chproxy_build_path: "{{build_dir}}/chproxy"
      tags: ['never', 'chproxy', 'system']


    ##### ##### ##### ##### #####    Redis server    ##### ##### ##### ##### ##### 
    - name: Redis setup
      block:
      - name: Including Docker container role for Redis server
        include_role:
          name: dr.docker-container
        vars:
          drdc_name: "redis"
          drdc_image: "redis:4-alpine"
          drdc_network: '{{docker_net_name}}'
          drdc_hosts: "{{docker_etc_hosts}}"
          drdc_memory_limit: '200m'
          drdc_volumes: ["{{dirs.redis}}:/data"]
          drdc_ports: ["{{if_inner}}:{{ports.redis.0}}:{{ports.redis.1}}"]
      tags: ['never', 'redis', 'system', 'docker', 'docker-container']


    ##### ##### ##### ##### #####    Logspout    ##### ##### ##### ##### ##### 
    - name: Logspout with Loggly streaming
      block:
      - debug:
          msg: "Using {{logspout_target}} target"
      - name: Including Docker container role for Logspout
        include_role:
          name: dr.docker-container
        vars:
          endpoints:
            loggly: "syslog+tcp://{{_loggly_hostname}}"
            papertrail: "syslog+tls://{{_papertrail_hostname}}"
          envs:
            loggly: 
              SYSLOG_STRUCTURED_DATA: "{{_loggly_api_key}}@41058 tag=\"Logspout\""
              SYSLOG_HOSTNAME: "{{hostname}}"
          drdc_name: "logspout"
          drdc_image: "gliderlabs/logspout"
          drdc_network: '{{docker_net_name}}'
          drdc_hosts: "{{docker_etc_hosts}}"
          drdc_memory_limit: '200m'
          drdc_cmd: "{{endpoints[logspout_target]}}"
          drdc_volumes:
            - /var/run/docker.sock:/var/run/docker.sock
          drdc_env: "{{envs[logspout_target]|default({})}}"
      when: "_logspout_enabled|default(False) == True"
      tags: ['never', 'logspout', 'system', 'docker', 'docker-container']


    ##### ##### ##### ##### #####    Anaconda    ##### ##### ##### ##### ##### 
    - block:
      - name: Anaconda setup
        debug: msg="bind to {{if_inner}}:{{ports.jupyter.0}}:{{ports.jupyter.1}}"
      - name: Including Docker container role for Anaconda
        include_role:
          name: dr.docker-container
        vars:
          conda_list: "{{jup_with_conda_def + jup_with_conda}}"
          pip_list: "{{jup_with_pip_def + jup_with_pip}}"
          cmd_parts:
            - "{{conda_list|length > 0 and ('conda install -y ' + conda_list|join(' ') + ' && ') or ''}}"
            - "{{pip_list|length > 0 and ('pip install ' + pip_list|join(' ') + ' && ') or ''}}"
            - "/opt/conda/bin/conda install jupyter -y --quiet && "
            - "/opt/conda/bin/jupyter notebook --notebook-dir=/opt/notebooks"
            - "--ip='*' --port=8888 --no-browser --allow-root --NotebookApp.token='' --NotebookApp.allow_origin='*'"
          drdc_name: 'anaconda'
          drdc_image: "continuumio/anaconda3"
          drdc_network: '{{docker_net_name}}'
          drdc_hosts: "{{docker_etc_hosts}}"
          drdc_memory_limit: '{{anaconda_mem_limit}}'
          drdc_cmd: "/bin/bash -c \"{{cmd_parts|join(' ')}}\""
          drdc_labels: "{{docker_band_lbls}}"
          drdc_env: "{{containers_env}}"
          drdc_volumes: 
            - '{{dirs.notebooks}}:/opt/notebooks'
          drdc_ports: ["{{if_inner}}:{{ports.jupyter.0}}:{{ports.jupyter.1}}"]
      when: 'setup_jupyter == True'
      tags: ['never', 'anaconda', 'system', 'platform', 'docker', 'docker-container']


    ##### ##### ##### ##### #####    Grafana    ##### ##### ##### ##### ##### 
    - block:
      - name: Creating Grafana datadir
        file:
          state: directory
          path: "{{dirs.grafana_data}}"
          owner: 472 # grafana container ids
          group: 472
      - name: Rendering Grafana Config
        template:
          src: 'grafana/{{item}}.j2'
          dest: '{{dirs.grafana_data}}/{{item}}'
        with_items:
          - grafana.ini
      - name: Including Docker container role for Grafana
        include_role:
          name: dr.docker-container
        vars:
          drdc_name: 'grafana'
          drdc_image: "grafana/grafana"
          drdc_network: '{{docker_net_name}}'
          drdc_hosts: "{{docker_etc_hosts}}"
          drdc_env:
            GF_INSTALL_PLUGINS: "{{(grafana_plugins_custom|default([]) + grafana_plugins)|join(',')}}"
          drdc_memory_limit: '200m'
          drdc_labels: "{{docker_band_lbls}}"
          drdc_volumes:
            - '{{dirs.grafana_data}}:/var/lib/grafana'
            - "{{dirs.grafana_data}}/grafana.ini:/etc/grafana/grafana.ini"
          drdc_ports:
            - "{{if_inner}}:{{ports.grafana.0}}:{{ports.grafana.1}}"
      tags: ['never', 'grafana', 'platform', 'docker', 'docker-container']


    ##### ##### ##### ##### #####    Splash screen    ##### ##### ##### ##### ##### 
    - block:
      - name: Including Static service role for Splash screen
        include_role:
          name: dr.static-service
        vars:
          dr_name: splash
          dr_dir: '{{dirs.splash}}'
          dr_repo: https://github.com/rockstat/splash.git
      tags: ['splash', 'platform']


    ##### ##### ##### ##### #####    Dashboard    ##### ##### ##### ##### ##### 
    - block:
      - name: Including Static service role for Dashboart
        include_role:
          name: dr.static-service
        vars:
          dr_name: dashboard
          dr_dir: '{{dirs.dashboard}}'
          dr_repo: https://github.com/rockstat/dashboard.git
      tags: ['dashboard', 'platform']


    ##### ##### ##### ##### #####    Band Director    ##### ##### ##### ##### ##### 
    - block:
      - name: Building band-base-py image
        include_role:
          name: dr.docker-container
        vars:
          drdc_name: band-base-py
          drdc_image: 'rst/band-base-py'
          drdc_dir: '{{dirs.band}}'
          drdc_repo: "https://github.com/rockstat/band"
          drdc_run_container: no
      - name: Including Docker container role for Director service
        include_role:
          name: dr.docker-container
        vars:
          env:
            PORT: "{{ports.band.1}}"
            IMAGES_PATH: /images
          drdc_image: 'rst/band-director'
          drdc_name: 'director'
          drdc_dir: '{{dirs.band_set}}'
          drdc_rel_path: '/director'
          drdc_repo: "https://github.com/rockstat/band-services"
          drdc_network: '{{docker_net_name}}'
          drdc_hosts: "{{docker_etc_hosts}}"
          drdc_labels: "{{docker_band_lbls}}"
          drdc_env: "{{env|combine(containers_env, director_env_extra|default({}))}}"
          drdc_memory_limit: '300m'
          drdc_volumes:
            - "{{dirs.band_set}}:/images/band_set:ro"
            - "{{dirs.rockme_set}}:/images/rockme_set:ro"
            - "{{dirs.director_data}}:/data" # containers configs
            - "{{dirs.band}}:/images/band_base_py:ro"
            - "{{dirs.user_images}}:/images/user:cached"
            - "/var/run/docker.sock:/var/run/docker.sock"
          drdc_ports:
            - "{{if_inner}}:{{ports.band.0}}:{{ports.band.1}}"
      tags: ['band', 'platform', 'docker', 'docker-container']


    ##### ##### ##### ##### #####    Theia    ##### ##### ##### ##### ##### 
    - block:
      - name: Creating User Images Directory
        file: state=directory path={{dirs.user_images}} owner=473 group=473
      - name: Creating User Workspace Directory
        file: state=directory path={{dirs.workspace}} owner=473 group=473
      - name: Including Docker container role for Theia IDE
        include_role:
          name: dr.docker-container
        vars:
          drdc_name: 'theia'
          drdc_image: madiedinro/theia-build
          drdc_labels: "{{docker_band_lbls}}"
          drdc_network: '{{docker_net_name}}'
          drdc_hosts: "{{docker_etc_hosts}}"
          drdc_env: "{{containers_env}}"
          drdc_memory_limit: '2g'
          drdc_nocache: "{{nocache is defined}}"
          drdc_volumes:
            - "{{dirs.workspace}}:{{workspace}}/:cached"
            - "{{dirs.user_images}}:{{workspace}}/my_images:cached"
            - "{{dirs.band}}:{{workspace}}/sources_ro/band:ro"
            - "{{dirs.band_set}}:{{workspace}}/sources_ro/band_set:ro"
            - "{{dirs.band_set}}/__skeletons:{{workspace}}/sources_ro/skeletons:ro"
            - "{{dirs.rockme_set}}:{{workspace}}/sources_ro/rockme_set:ro"
          drdc_ports: ["{{if_inner}}:{{ports.theia.0}}:{{ports.theia.1}}"]
          # build from sources
          # drdc_dir: "{{build_dir}}/theia"
          # drdc_repo: "https://github.com/rockstat/theia-build.git"
      - name: Copying bootstrap files
        command: 'cp -nR {{build_dir}}/theia/bootstrap/.theia {{dirs.workspace}}/'
      vars:
        workspace: "/home/theia/project"
      when: 'setup_theia == True'
      tags: ['theia', 'platform', 'band', 'docker', 'docker-container']


    ##### ##### ##### ##### #####    Frontier    ##### ##### ##### ##### ##### 
    - name: Frontier setup
      block:
      - name: Including Docker container role for Frontier service
        include_role:
          name: dr.docker-container
        vars:
          env: {}
          drdc_name: 'frontier'
          drdc_image: 'rst/frontier'
          drdc_dir: "{{dirs.rockme_set}}/frontier"
          drdc_repo: "https://github.com/rockstat/frontier"
          drdc_network: '{{docker_net_name}}'
          drdc_hosts: "{{docker_etc_hosts}}"
          drdc_env: "{{env|combine(containers_env, frontier_env_extra|default({}) )}}"
          drdc_labels: "{{docker_band_lbls}}"
          drdc_memory_limit: '300m'
          drdc_volumes:
            - "{{dirs.frontier_custom_config}}:/app/config/custom"
          drdc_ports:
            - "{{if_inner}}:{{ports.frontier.0}}:{{ports.frontier.1}}"
            - "{{if_inner}}:{{ports.frontier_ws.0}}:{{ports.frontier_ws.1}}"
      tags: ['frontier', 'platform', 'rockme', 'docker', 'docker-container']


    ##### ##### ##### ##### #####    ClickHouse Writer    ##### ##### ##### ##### ##### 
    - name: Clickhouse writer
      block:
      - name: Including ClickHouse maintain role
        include_role:
          name: clickhouse-maintain
        vars:
          role_ops_db: "{{ch_db}}"
          role_migrations_path: clickhouse_migrations
        tags: ['never', 'chmigrate']
      - name: Including Docker container role for ClickHouse Writer service
        include_role:
          name: dr.docker-container
        vars:
          env: {}
          drdc_name: 'chwriter'
          drdc_image: 'rst/chwriter'
          drdc_dir: "{{dirs.rockme_set}}/chwriter"
          drdc_repo: "https://github.com/rockstat/chwriter"
          drdc_network: '{{docker_net_name}}'
          drdc_hosts: "{{docker_etc_hosts}}"
          drdc_env: "{{env|combine(containers_env)}}"
          drdc_labels: "{{docker_band_lbls}}"
          drdc_memory_limit: '300m'
          drdc_volumes:
            - "{{dirs.chwriter_custom_config}}:/app/config/custom"
            - "{{dirs.chwriter_emergency}}:/app/emergency"
      tags: ['chwriter', 'chmigrate', 'platform', 'rockme', 'docker', 'docker-container']

    ##### ##### ##### ##### #####    Heavyload    ##### ##### ##### ##### ##### 
    - block:
      - name: Including Docker container role for Heavyload service
        include_role:
          name: dr.docker-container
        vars:
          drdc_name: 'heavyload'
          drdc_network: '{{docker_net_name}}'
          drdc_hosts: "{{docker_etc_hosts}}"
          drdc_pull: false
          drdc_env:
            WEBHOOK: "{{containers_env.FRONTIER_URL}}/wh/0/upload/notify"
          drdc_repo: https://github.com/rockstat/heavyload
          drdc_labels: "{{docker_band_lbls}}"
          drdc_dir: "{{build_dir}}/heavyload"
          drdc_memory_limit: '100m'
          drdc_ports:
            - "{{if_inner}}:{{ports.heavyload.0}}:{{ports.heavyload.1}}"
          drdc_volumes:
            - "{{dirs.uploads}}:/go/src/heavyload/upload"
      tags: ['heavyload', 'platform', 'docker', 'docker-container']

    # - import_tasks: extensions/metrics_server.yml
    #   when: 'metrics_server == True'

    # - import_role:
    #     name: dr.openvpn-client
    #   vars:
    #     openvpnc_key: '{{s2s_vpn_key}}'
    #   when: s2s_vpn_connect is defined and s2s_vpn_connect == True and vpn_id is defined
    #   tags: ['s2s-ovpn-client', 's2s-ovpn']

