---
- name: Installing platform
  hosts: rockstat
  become: yes
  vars_files:
    - vars/config.yml
  tasks:

    # - debug: msg={{ports.band.1}}
    - import_role:
        name: dr.server
      vars:
        drs_setup_user: yes
        drs_user: '{{support_user}}'
        drs_pub_key_file: '{{support_key_file}}'
      tags: ['os']

    - import_role:
        name: dr.docker
      vars:
        drd_users:
        - "{{support_user}}"
        drd_create_network: yes
        drd_net_name: '{{docker_net_name}}'
        drd_bind_ip: "{{docker_host_ip}}"
        drd_interface: '{{docker_interface}}'
        drd_net: '{{docker_net}}'
      tags: ['docker']
      become: yes

    - import_role:
        name: dr.exposeur
      vars:
        expo_reset_ufw: true
        expo_rules: '{{firewall_rules + priv_firewall_rules|default([]) + group_firewall_rules|default([])}}'
        expo_expose_rules: '{{expose_rules|default([]) + priv_expose_rules|default([]) + group_expose_rules|default([])}}'
      tags: ['firewall']

    - import_role:
        name: dr.letsencrypt
      vars:
        letsencrypt_domains_groups: '{{domains_ssl}}'
        letsencrypt_pause_services: ['nginx']
      tags: ssl

    - import_role:
        name: dr.static-service
      vars:
        dr_name: splash
        dr_dir: '{{dirs.splash}}'
        dr_repo: https://github.com/rockstat/splash
      tags: splash

    - import_role:
        name: jdauphant.nginx
      vars:
        nginx_official_repo: yes
        keep_only_specified: yes
        nginx_http_params: '{{cfg_nginx_http_params}}'
        nginx_sites: '{{sites}}'
        nginx_auth_basic_files: '{{htpasswd_files|default({})}}'
        nginx_configs:
          upgrade: '{{upgr}}'
          gzip: '{{cfg_nginx_gzip_params}}'
          proxy: '{{cfg_nginx_proxy_params}}'
          upstream: '{{upstreams}}'
          ssl: '{{cfg_nginx_ssl_params}}'
      tags: ['`nginx']

    - import_role:
        name: dr.netdata
      vars:
        drn_allow:
          dashboard_from: '{{netdata_from}}'
          badges_from: '{{netdata_from}}'
          conf_from: '{{netdata_conf_from}}'
          connections_from: '{{netdata_streaming_from}}'
          streaming_from: '{{netdata_streaming_from}}'
        drn_stream: '{{netdata_stream_config|default({})}}'
        drn_backend: '{{netdata_backend_config|default({})}}'
      tags: ['netdata']

    - import_role:
        name: AlexeySetevoi/clickhouse
      vars:
        clickhouse_users_custom: '{{clickhouse_users|default([])}}'
        clickhouse_networks_default: ["::1", "127.0.0.1", "{{ docker_net }}"]
        clickhouse_dbs_custom: [{name: '{{clickhouse_db}}'}]
        clickhouse_path_data: "{{dirs.clickhouse}}"
        clickhouse_path_tmp: "{{dirs.clickhouse_tmp}}"
      tags: ['clickhouse']

    - block:
      - debug:
          msg: "docker_net_name:{{docker_net_name}}, docker_ipnetwork:{{docker_ipnetwork}} docker_netmask:{{docker_netmask}} "
      - name: Creating vpn keys dir
        file:
          state: directory
          path: "{{dirs.ovpnkeys}}"
      - import_role:
          name: alco-openvpn-server
        vars:
          ovpn_domain: "{{domain}}"
          ovpn_keys_dir: '{{dirs.ovpnkeys}}'
          ovpn_docker_net_name: '{{docker_net_name}}'
          ovpn_docker_network: '{{docker_ipnetwork}}'
          ovpn_docker_netmask: '{{docker_netmask}}'
          ovpn_port: '{{ports.openvpn.0}}'
      tags: ['ovpn']

    - name: Redis setup
      block:
      - import_role:
          name: dr.docker-container
        vars:
          drdc_name: "redis"
          drdc_image: "redis:4-alpine"
          drdc_network: '{{docker_net_name}}'
          drdc_memory_limit: '200m'
          drdc_volumes: ["{{dirs.redis}}:/data"]
          drdc_ports: ["{{docker_host_ip}}:{{ports.redis.0}}:{{ports.redis.1}}"]
      tags: ['redis']

    - name: Logspout with Loggly streaming
      block:
      - import_role:
          name: dr.docker-container
        vars:
          drdc_name: "logspout"
          drdc_image: "gliderlabs/logspout"
          drdc_network: '{{docker_net_name}}'
          drdc_memory_limit: '200m'
          drdc_cmd: syslog+tcp://logs-01.loggly.com:514
          drdc_volumes:
            - /var/run/docker.sock:/var/run/docker.sock
          drdc_env:
            SYSLOG_STRUCTURED_DATA: "{{loggly_api_key}}@41058 tag=\"Logspout\""
            SYSLOG_HOSTNAME: "{{hostname}}"
      when: 'loggly_api_key is defined'
      tags: ['logspout']

    - name: CHProxy setup
      import_role: 
        name: chproxy
      vars:
        chproxy_docker_bind: "{{docker_host_ip}}:{{ports.chproxy.0}}:{{ports.chproxy.1}}"
        chproxy_docker_net: "{{docker_net_name}}"
        chproxy_users: "{{hst_chproxy_users}}"
      tags: ['chproxy']


    - import_role:
        name: dr.docker-container
      vars:
        cmd_parts: 
          - "/opt/conda/bin/conda install jupyter -y --quiet && "
          - "/opt/conda/bin/jupyter notebook --notebook-dir=/opt/notebooks"
          - "--ip='*' --port=8888 --no-browser --allow-root --NotebookApp.token=''"
        drdc_name: 'anaconda'
        drdc_image: "continuumio/anaconda3"
        drdc_network: '{{docker_net_name}}'
        drdc_memory_limit: '2g'
        drdc_cmd: "/bin/bash -c \"{{cmd_parts|join(' ')}}\""
        drdc_volumes: ['{{data_dir}}:/opt/notebooks']
        drdc_ports: ["{{docker_host_ip}}:{{ports.jupyter.0}}:{{ports.jupyter.1}}"]
      tags: ['anaconda']



    - block:
      - name: Creating Grafana datadir
        file:
          state: directory
          path: "{{dirs.grafana_data}}"
          owner: 472 # grafana container ids
          group: 472
      - import_role:
          name: dr.docker-container
        vars:
          drdc_name: 'grafana'
          drdc_image: "grafana/grafana"
          drdc_network: '{{docker_net_name}}'
          drdc_env:
            GF_INSTALL_PLUGINS: "{{(grafana_plugins_custom|default([]) + grafana_plugins)|join(',')}}"
            GF_AUTH_BASIC: false
            # GF_SECURITY_ADMIN_PASSWORD: secret
          drdc_memory_limit: '200m'
          drdc_volumes:
            - '{{dirs.grafana_data}}:/var/lib/grafana'
          drdc_ports:
            - "{{docker_host_ip}}:{{ports.grafana.0}}:{{ports.grafana.1}}"
      tags: ['grafana']


    - name: Heavyload setup
      import_role:
        name: dr.docker-container
      vars:
        drdc_name: 'heavyload'
        drdc_network: '{{docker_net_name}}'
        drdc_env:
          WEBHOOK: "{{containers_env.KERNEL_URL}}/wh/upload/notify"
        drdc_repo: https://github.com/rockstat/heavyload
        drdc_dir: "{{build_dir}}/heavyload"
        drdc_memory_limit: '200m'
        drdc_ports:
          - "{{docker_host_ip}}:{{ports.heavyload.0}}:{{ports.heavyload.1}}"
      tags: ['heavyload']

    - name: Band setup
      block:
      - import_role:
          name: dr.static-service
        vars:
          dr_name: band_collection
          dr_dir: '{{dirs.band_collection}}'
          dr_repo: https://github.com/rockstat/band-services
        tags: splash

      - import_role:
          name: dr.docker-container
        vars:
          env:
            PORT: "{{ports.band.1}}"
            IMAGES_PATH: /images
          drdc_name: 'band'
          drdc_dir: '{{dirs.band}}'
          drdc_repo: "https://github.com/rockstat/band"
          drdc_network: '{{docker_net_name}}'
          drdc_env: "{{env|combine(containers_env)}}"
          drdc_memory_limit: '300m'
          drdc_volumes:
            - "{{dirs.band_collection}}:/images/band_collection:ro"
            - "{{dirs.band}}:/images/band_base:ro"
            - "/var/run/docker.sock:/var/run/docker.sock"
          drdc_ports:
            - "{{docker_host_ip}}:{{ports.band.0}}:{{ports.band.1}}"
      tags: ['band']

    - block:
      - name: Creating Theia datadir
        file:
          state: directory
          path: "{{dirs.userimg}}"
          owner: 473
          group: 473
      - import_role:
          name: dr.docker-container
        vars:
          drdc_name: 'theia'
          drdc_dir: "{{build_dir}}/theia"
          drdc_repo: "https://github.com/rockstat/theia-build.git"
          drdc_network: '{{docker_net_name}}'
          drdc_memory_limit: '2g'
          drdc_volumes:
            - "{{dirs.userimg}}:/home/theia/project:cached"
          drdc_ports: ["{{docker_host_ip}}:{{ports.theia.0}}:{{ports.theia.1}}"]
      tags: ['theia']


    - name: Kernel setup
      block:
      - import_role:
          name: dr.docker-container
        vars:
          env:
            PORT: 8080
            PORT_WS: 8082
            PORT_WSS: 8083
            LOG_LEVEL: debug
          drdc_name: 'kernel'
          drdc_dir: "{{build_dir}}/kernel"
          drdc_repo: "https://github.com/rockstat/kernel"
          drdc_network: '{{docker_net_name}}'
          drdc_env: "{{env|combine(containers_env)}}"
          drdc_memory_limit: '300m'
          drdc_volumes:
            - "{{dirs.kernel_custom_config}}:/app/config/custom"
          drdc_ports:
            - "{{docker_host_ip}}:{{ports.kernel.0}}:{{ports.kernel.1}}"
      tags: ['kernel']

